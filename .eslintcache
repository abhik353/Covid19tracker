[{"D:\\covidtracker\\src\\App.js":"1","D:\\covidtracker\\src\\components\\Cards\\Cards.jsx":"2","D:\\covidtracker\\src\\components\\index.js":"3","D:\\covidtracker\\src\\components\\CountryPicker\\CountryPicker.jsx":"4","D:\\covidtracker\\src\\components\\Chart\\Chart.jsx":"5","D:\\covidtracker\\src\\api\\index.js":"6","D:\\covidtracker\\src\\index.js":"7"},{"size":699,"mtime":1606144453412,"results":"8","hashOfConfig":"9"},{"size":3521,"mtime":1606144320828,"results":"10","hashOfConfig":"9"},{"size":172,"mtime":1606145211844,"results":"11","hashOfConfig":"9"},{"size":724,"mtime":1606145282138,"results":"12","hashOfConfig":"9"},{"size":1239,"mtime":1606144103102,"results":"13","hashOfConfig":"9"},{"size":1071,"mtime":1606144856400,"results":"14","hashOfConfig":"9"},{"size":147,"mtime":1606115516382,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"iwzjbp",{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\covidtracker\\src\\App.js",[],"D:\\covidtracker\\src\\components\\Cards\\Cards.jsx",["32"],"import React from 'react'\r\nimport styles from './Cards.module.css'\r\nimport {Card, CardContent, Typography, Grid, StylesProvider} from '@material-ui/core'\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames'\r\n\r\nconst Cards = ({data: {confirmed, recovered, deaths, lastUpdate}}) => {\r\n    if(!confirmed){\r\n        return 'Loading...'\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp \r\n                                start={0}\r\n                                end={confirmed.value}\r\n                                duration={1}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            No of activecases\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Recovered\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp \r\n                                start={0}\r\n                                end={recovered.value}\r\n                                duration={1}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            date\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            No of recovered cases\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.death)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Deaths\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp \r\n                                start={0}\r\n                                end={deaths.value}\r\n                                duration={1}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            date\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            No of Deaths due to covid19 in 2020\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards\r\n","D:\\covidtracker\\src\\components\\index.js",[],"D:\\covidtracker\\src\\components\\CountryPicker\\CountryPicker.jsx",["33"],"D:\\covidtracker\\src\\components\\Chart\\Chart.jsx",["34","35"],"import React,{useState, useEffect} from 'react'\r\nimport {fetchDailyData} from '../../api'\r\nimport {Line, Bar} from 'react-chartjs-2'\r\nimport styles from './Chart.module.css'\r\n\r\nconst Chart = () => {\r\n    const [dailyData, setDailyData] = useState({})\r\n    \r\n    useEffect(async () => {\r\n        const fetchApi = async () => {\r\n            setDailyData(await fetchDailyData())\r\n        }\r\n        fetchApi()\r\n    },[])\r\n\r\n    const lineChart = (\r\n        dailyData.length ?\r\n        (<Line\r\n            data={{\r\n                labels: dailyData.map(({date}) => date),\r\n                datasets: [{\r\n                    data: dailyData.map(({confirmed}) => confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: '#520CA9',\r\n                    fill: true\r\n                }, {\r\n                    data: dailyData.map(({deaths}) => deaths),\r\n                    label: 'Infected',\r\n                    borderColor: '#A90C1F',\r\n                    backgroundColor: '#EC6666',\r\n                    fill: true\r\n                }],\r\n\r\n            }}\r\n        />) : null\r\n    )\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart\r\n","D:\\covidtracker\\src\\api\\index.js",[],"D:\\covidtracker\\src\\index.js",[],{"ruleId":"36","severity":1,"message":"37","line":3,"column":46,"nodeType":"38","messageId":"39","endLine":3,"endColumn":60},{"ruleId":"36","severity":1,"message":"40","line":7,"column":12,"nodeType":"38","messageId":"39","endLine":7,"endColumn":28},{"ruleId":"36","severity":1,"message":"41","line":3,"column":15,"nodeType":"38","messageId":"39","endLine":3,"endColumn":18},{"ruleId":"42","severity":1,"message":"43","line":9,"column":15,"nodeType":"44","endLine":14,"endColumn":6},"no-unused-vars","'StylesProvider' is defined but never used.","Identifier","unusedVar","'fetchedCountries' is assigned a value but never used.","'Bar' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression"]